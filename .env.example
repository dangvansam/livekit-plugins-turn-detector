# LiveKit Turn Detection Configuration
# Choose your provider: "openai" or "triton"
TURN_DETECTION_PROVIDER=openai

# =============================================================================
# OpenAI / vLLM Configuration
# Use these settings when TURN_DETECTION_PROVIDER=openai
# =============================================================================

# Server URL (vLLM server or OpenAI API)
TURN_DETECTION_BASE_URL=http://localhost:8000

# API Key (optional for vLLM, required for OpenAI)
TURN_DETECTION_API_KEY=EMPTY

# Model name served by vLLM or OpenAI model name
TURN_DETECTION_MODEL=turn-detection-model

# Generation parameters
TURN_DETECTION_TEMPERATURE=0.1
TURN_DETECTION_MAX_TOKENS=20

# Custom system prompt (optional)
TURN_DETECTION_SYSTEM_PROMPT="You are a speaking turn-ending identifier. Your task is to identify whether the user's speaking turn is complete or not. Respond with 'end' if the user's turn is complete, or 'continue' if it is not."

# Supported languages (optional, comma-separated)
TURN_DETECTION_SUPPORT_LANGUAGES=en,zh

# =============================================================================
# Triton Inference Server Configuration
# Use these settings when TURN_DETECTION_PROVIDER=triton
# =============================================================================

# Triton server gRPC URL
# TURN_DETECTION_BASE_URL=localhost:7001

# Triton model ensemble name
# TURN_DETECTION_MODEL=ensemble

# HuggingFace tokenizer for text preprocessing
# TURN_DETECTION_TOKENIZER=Qwen/Qwen3-0.6B

# Generation parameters (same as OpenAI)
# TURN_DETECTION_TEMPERATURE=0.1
# TURN_DETECTION_MAX_TOKENS=20

# System prompt (same as OpenAI)
# TURN_DETECTION_SYSTEM_PROMPT="You are a speaking turn-ending identifier..."

# Supported languages (same as OpenAI)
# TURN_DETECTION_SUPPORT_LANGUAGES=en,es,fr,de,it,pt,nl,zh,ja,ko,id,ru,tr

# =============================================================================
# Usage Instructions
# =============================================================================
#
# 1. For vLLM Backend:
#    - Set TURN_DETECTION_PROVIDER=openai
#    - Configure TURN_DETECTION_BASE_URL to your vLLM server
#    - Set TURN_DETECTION_MODEL to your model name in vLLM
#    - Set TURN_DETECTION_API_KEY=EMPTY (or your custom key)
#
# 2. For OpenAI API:
#    - Set TURN_DETECTION_PROVIDER=openai
#    - Set TURN_DETECTION_BASE_URL=https://api.openai.com/v1 (or leave unset)
#    - Set TURN_DETECTION_MODEL=gpt-4o-mini (or your preferred model)
#    - Set TURN_DETECTION_API_KEY to your OpenAI API key
#
# 3. For Triton Server:
#    - Set TURN_DETECTION_PROVIDER=triton
#    - Configure TURN_DETECTION_BASE_URL to your Triton gRPC endpoint
#    - Set TURN_DETECTION_MODEL to your ensemble model name
#    - Set TURN_DETECTION_TOKENIZER to your HuggingFace tokenizer
#
# 4. Switch providers easily by changing only TURN_DETECTION_PROVIDER
#    and the relevant configuration values above.